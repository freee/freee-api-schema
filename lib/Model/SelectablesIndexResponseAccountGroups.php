<?php
/**
 * SelectablesIndexResponseAccountGroups
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * SelectablesIndexResponseAccountGroups Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class SelectablesIndexResponseAccountGroups implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'selectablesIndexResponse_account_groups';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'name' => 'string',
        'account_structure_id' => 'int',
        'account_category_id' => 'int',
        'detail_type' => 'int',
        'index' => 'int',
        'created_at' => 'string',
        'updated_at' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'name' => null,
        'account_structure_id' => null,
        'account_category_id' => null,
        'detail_type' => null,
        'index' => null,
        'created_at' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'name' => 'name',
        'account_structure_id' => 'account_structure_id',
        'account_category_id' => 'account_category_id',
        'detail_type' => 'detail_type',
        'index' => 'index',
        'created_at' => 'created_at',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'account_structure_id' => 'setAccountStructureId',
        'account_category_id' => 'setAccountCategoryId',
        'detail_type' => 'setDetailType',
        'index' => 'setIndex',
        'created_at' => 'setCreatedAt',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'account_structure_id' => 'getAccountStructureId',
        'account_category_id' => 'getAccountCategoryId',
        'detail_type' => 'getDetailType',
        'index' => 'getIndex',
        'created_at' => 'getCreatedAt',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['name'] = $data['name'] ?? null;
        $this->container['account_structure_id'] = $data['account_structure_id'] ?? null;
        $this->container['account_category_id'] = $data['account_category_id'] ?? null;
        $this->container['detail_type'] = $data['detail_type'] ?? null;
        $this->container['index'] = $data['index'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['account_structure_id'] === null) {
            $invalidProperties[] = "'account_structure_id' can't be null";
        }
        if (($this->container['account_structure_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'account_structure_id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['account_structure_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'account_structure_id', must be bigger than or equal to 1.";
        }

        if ($this->container['account_category_id'] === null) {
            $invalidProperties[] = "'account_category_id' can't be null";
        }
        if (($this->container['account_category_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'account_category_id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['account_category_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'account_category_id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['detail_type']) && ($this->container['detail_type'] > 4)) {
            $invalidProperties[] = "invalid value for 'detail_type', must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['detail_type']) && ($this->container['detail_type'] < 0)) {
            $invalidProperties[] = "invalid value for 'detail_type', must be bigger than or equal to 0.";
        }

        if ($this->container['index'] === null) {
            $invalidProperties[] = "'index' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 決算書表示名（小カテゴリー）ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SelectablesIndexResponseAccountGroups., must be smaller than or equal to 2147483647.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling SelectablesIndexResponseAccountGroups., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name 決算書表示名
     *
     * @return self
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets account_structure_id
     *
     * @return int
     */
    public function getAccountStructureId()
    {
        return $this->container['account_structure_id'];
    }

    /**
     * Sets account_structure_id
     *
     * @param int $account_structure_id 年度ID
     *
     * @return self
     */
    public function setAccountStructureId($account_structure_id)
    {

        if (($account_structure_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $account_structure_id when calling SelectablesIndexResponseAccountGroups., must be smaller than or equal to 2147483647.');
        }
        if (($account_structure_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $account_structure_id when calling SelectablesIndexResponseAccountGroups., must be bigger than or equal to 1.');
        }

        $this->container['account_structure_id'] = $account_structure_id;

        return $this;
    }

    /**
     * Gets account_category_id
     *
     * @return int
     */
    public function getAccountCategoryId()
    {
        return $this->container['account_category_id'];
    }

    /**
     * Sets account_category_id
     *
     * @param int $account_category_id 勘定科目カテゴリーID
     *
     * @return self
     */
    public function setAccountCategoryId($account_category_id)
    {

        if (($account_category_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $account_category_id when calling SelectablesIndexResponseAccountGroups., must be smaller than or equal to 2147483647.');
        }
        if (($account_category_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $account_category_id when calling SelectablesIndexResponseAccountGroups., must be bigger than or equal to 1.');
        }

        $this->container['account_category_id'] = $account_category_id;

        return $this;
    }

    /**
     * Gets detail_type
     *
     * @return int|null
     */
    public function getDetailType()
    {
        return $this->container['detail_type'];
    }

    /**
     * Sets detail_type
     *
     * @param int|null $detail_type 詳細パラメータの種類
     *
     * @return self
     */
    public function setDetailType($detail_type)
    {

        if (!is_null($detail_type) && ($detail_type > 4)) {
            throw new \InvalidArgumentException('invalid value for $detail_type when calling SelectablesIndexResponseAccountGroups., must be smaller than or equal to 4.');
        }
        if (!is_null($detail_type) && ($detail_type < 0)) {
            throw new \InvalidArgumentException('invalid value for $detail_type when calling SelectablesIndexResponseAccountGroups., must be bigger than or equal to 0.');
        }

        $this->container['detail_type'] = $detail_type;

        return $this;
    }

    /**
     * Gets index
     *
     * @return int
     */
    public function getIndex()
    {
        return $this->container['index'];
    }

    /**
     * Sets index
     *
     * @param int $index 並び順
     *
     * @return self
     */
    public function setIndex($index)
    {
        $this->container['index'] = $index;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return string|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param string|null $created_at 作成日時
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return string|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param string|null $updated_at 更新日時
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


