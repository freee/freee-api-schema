<?php
/**
 * DealRenews
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DealRenews Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DealRenews implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'deal_renews';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'update_date' => 'string',
        'renew_target_id' => 'int',
        'renew_target_type' => 'string',
        'details' => '\OpenAPI\Client\Model\DealDetails[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'update_date' => null,
        'renew_target_id' => 'int64',
        'renew_target_type' => null,
        'details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'update_date' => 'update_date',
        'renew_target_id' => 'renew_target_id',
        'renew_target_type' => 'renew_target_type',
        'details' => 'details'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'update_date' => 'setUpdateDate',
        'renew_target_id' => 'setRenewTargetId',
        'renew_target_type' => 'setRenewTargetType',
        'details' => 'setDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'update_date' => 'getUpdateDate',
        'renew_target_id' => 'getRenewTargetId',
        'renew_target_type' => 'getRenewTargetType',
        'details' => 'getDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const RENEW_TARGET_TYPE_DETAIL = 'detail';
    const RENEW_TARGET_TYPE_ACCRUAL = 'accrual';
    const RENEW_TARGET_TYPE_RENEW = 'renew';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRenewTargetTypeAllowableValues()
    {
        return [
            self::RENEW_TARGET_TYPE_DETAIL,
            self::RENEW_TARGET_TYPE_ACCRUAL,
            self::RENEW_TARGET_TYPE_RENEW,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['update_date'] = $data['update_date'] ?? null;
        $this->container['renew_target_id'] = $data['renew_target_id'] ?? null;
        $this->container['renew_target_type'] = $data['renew_target_type'] ?? null;
        $this->container['details'] = $data['details'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['update_date'] === null) {
            $invalidProperties[] = "'update_date' can't be null";
        }
        if ($this->container['renew_target_id'] === null) {
            $invalidProperties[] = "'renew_target_id' can't be null";
        }
        if (($this->container['renew_target_id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'renew_target_id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['renew_target_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'renew_target_id', must be bigger than or equal to 1.";
        }

        if ($this->container['renew_target_type'] === null) {
            $invalidProperties[] = "'renew_target_type' can't be null";
        }
        $allowedValues = $this->getRenewTargetTypeAllowableValues();
        if (!is_null($this->container['renew_target_type']) && !in_array($this->container['renew_target_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'renew_target_type', must be one of '%s'",
                $this->container['renew_target_type'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['details'] === null) {
            $invalidProperties[] = "'details' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id +更新行ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DealRenews., must be smaller than or equal to 9223372036854775807.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DealRenews., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets update_date
     *
     * @return string
     */
    public function getUpdateDate()
    {
        return $this->container['update_date'];
    }

    /**
     * Sets update_date
     *
     * @param string $update_date 更新日 (yyyy-mm-dd)
     *
     * @return self
     */
    public function setUpdateDate($update_date)
    {
        $this->container['update_date'] = $update_date;

        return $this;
    }

    /**
     * Gets renew_target_id
     *
     * @return int
     */
    public function getRenewTargetId()
    {
        return $this->container['renew_target_id'];
    }

    /**
     * Sets renew_target_id
     *
     * @param int $renew_target_id +更新の対象行ID
     *
     * @return self
     */
    public function setRenewTargetId($renew_target_id)
    {

        if (($renew_target_id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $renew_target_id when calling DealRenews., must be smaller than or equal to 9223372036854775807.');
        }
        if (($renew_target_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $renew_target_id when calling DealRenews., must be bigger than or equal to 1.');
        }

        $this->container['renew_target_id'] = $renew_target_id;

        return $this;
    }

    /**
     * Gets renew_target_type
     *
     * @return string
     */
    public function getRenewTargetType()
    {
        return $this->container['renew_target_type'];
    }

    /**
     * Sets renew_target_type
     *
     * @param string $renew_target_type +更新の対象行タイプ
     *
     * @return self
     */
    public function setRenewTargetType($renew_target_type)
    {
        $allowedValues = $this->getRenewTargetTypeAllowableValues();
        if (!in_array($renew_target_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'renew_target_type', must be one of '%s'",
                    $renew_target_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['renew_target_type'] = $renew_target_type;

        return $this;
    }

    /**
     * Gets details
     *
     * @return \OpenAPI\Client\Model\DealDetails[]
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param \OpenAPI\Client\Model\DealDetails[] $details +更新の明細行一覧（配列）
     *
     * @return self
     */
    public function setDetails($details)
    {
        $this->container['details'] = $details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


