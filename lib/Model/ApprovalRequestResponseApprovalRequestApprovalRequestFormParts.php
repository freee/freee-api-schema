<?php
/**
 * ApprovalRequestResponseApprovalRequestApprovalRequestFormParts
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ApprovalRequestResponseApprovalRequestApprovalRequestFormParts Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class ApprovalRequestResponseApprovalRequestApprovalRequestFormParts implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'approvalRequestResponse_approval_request_approval_request_form_parts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'order' => 'int',
        'type' => 'string',
        'label' => 'string',
        'annotation' => 'string',
        'required' => 'bool',
        'values' => '\OpenAPI\Client\Model\ApprovalRequestResponseApprovalRequestApprovalRequestFormValues[]',
        'max_amount' => 'int',
        'min_amount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'order' => null,
        'type' => null,
        'label' => null,
        'annotation' => null,
        'required' => null,
        'values' => null,
        'max_amount' => null,
        'min_amount' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'order' => 'order',
        'type' => 'type',
        'label' => 'label',
        'annotation' => 'annotation',
        'required' => 'required',
        'values' => 'values',
        'max_amount' => 'max_amount',
        'min_amount' => 'min_amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'order' => 'setOrder',
        'type' => 'setType',
        'label' => 'setLabel',
        'annotation' => 'setAnnotation',
        'required' => 'setRequired',
        'values' => 'setValues',
        'max_amount' => 'setMaxAmount',
        'min_amount' => 'setMinAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'order' => 'getOrder',
        'type' => 'getType',
        'label' => 'getLabel',
        'annotation' => 'getAnnotation',
        'required' => 'getRequired',
        'values' => 'getValues',
        'max_amount' => 'getMaxAmount',
        'min_amount' => 'getMinAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const TYPE_TITLE = 'title';
    const TYPE_SINGLE_LINE = 'single_line';
    const TYPE_MULTI_LINE = 'multi_line';
    const TYPE_SELECT = 'select';
    const TYPE_DATE = 'date';
    const TYPE_AMOUNT = 'amount';
    const TYPE_RECEIPT = 'receipt';
    const TYPE_SECTION = 'section';
    const TYPE_PARTNER = 'partner';
    const TYPE_NINJA_SIGN_DOCUMENT = 'ninja_sign_document';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_TITLE,
            self::TYPE_SINGLE_LINE,
            self::TYPE_MULTI_LINE,
            self::TYPE_SELECT,
            self::TYPE_DATE,
            self::TYPE_AMOUNT,
            self::TYPE_RECEIPT,
            self::TYPE_SECTION,
            self::TYPE_PARTNER,
            self::TYPE_NINJA_SIGN_DOCUMENT,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['order'] = $data['order'] ?? null;
        $this->container['type'] = $data['type'] ?? null;
        $this->container['label'] = $data['label'] ?? null;
        $this->container['annotation'] = $data['annotation'] ?? null;
        $this->container['required'] = $data['required'] ?? null;
        $this->container['values'] = $data['values'] ?? null;
        $this->container['max_amount'] = $data['max_amount'] ?? null;
        $this->container['min_amount'] = $data['min_amount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if (!is_null($this->container['order']) && ($this->container['order'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'order', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['order']) && ($this->container['order'] < 0)) {
            $invalidProperties[] = "invalid value for 'order', must be bigger than or equal to 0.";
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'type', must be one of '%s'",
                $this->container['type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['max_amount']) && ($this->container['max_amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'max_amount', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['max_amount']) && ($this->container['max_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'max_amount', must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['min_amount']) && ($this->container['min_amount'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'min_amount', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['min_amount']) && ($this->container['min_amount'] < 0)) {
            $invalidProperties[] = "invalid value for 'min_amount', must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 項目ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be smaller than or equal to 2147483647.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets order
     *
     * @return int|null
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param int|null $order 順序
     *
     * @return self
     */
    public function setOrder($order)
    {

        if (!is_null($order) && ($order > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $order when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($order) && ($order < 0)) {
            throw new \InvalidArgumentException('invalid value for $order when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be bigger than or equal to 0.');
        }

        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string|null
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string|null $type 項目種別 (title: 申請タイトル, single_line: 自由記述形式 1行, multi_line: 自由記述形式 複数行, select: プルダウン, date: 日付, amount: 金額, receipt: 添付ファイル, section: 部門ID, partner: 取引先ID, ninja_sign_document: 契約書（freeeサイン連携）)
     *
     * @return self
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'type', must be one of '%s'",
                    $type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string|null
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string|null $label 項目名
     *
     * @return self
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets annotation
     *
     * @return string|null
     */
    public function getAnnotation()
    {
        return $this->container['annotation'];
    }

    /**
     * Sets annotation
     *
     * @param string|null $annotation 追加説明
     *
     * @return self
     */
    public function setAnnotation($annotation)
    {
        $this->container['annotation'] = $annotation;

        return $this;
    }

    /**
     * Gets required
     *
     * @return bool|null
     */
    public function getRequired()
    {
        return $this->container['required'];
    }

    /**
     * Sets required
     *
     * @param bool|null $required 必須かどうか
     *
     * @return self
     */
    public function setRequired($required)
    {
        $this->container['required'] = $required;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \OpenAPI\Client\Model\ApprovalRequestResponseApprovalRequestApprovalRequestFormValues[]|null
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \OpenAPI\Client\Model\ApprovalRequestResponseApprovalRequestApprovalRequestFormValues[]|null $values 選択項目
     *
     * @return self
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets max_amount
     *
     * @return int|null
     */
    public function getMaxAmount()
    {
        return $this->container['max_amount'];
    }

    /**
     * Sets max_amount
     *
     * @param int|null $max_amount 上限金額
     *
     * @return self
     */
    public function setMaxAmount($max_amount)
    {

        if (!is_null($max_amount) && ($max_amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $max_amount when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($max_amount) && ($max_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $max_amount when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be bigger than or equal to 0.');
        }

        $this->container['max_amount'] = $max_amount;

        return $this;
    }

    /**
     * Gets min_amount
     *
     * @return int|null
     */
    public function getMinAmount()
    {
        return $this->container['min_amount'];
    }

    /**
     * Sets min_amount
     *
     * @param int|null $min_amount 下限金額
     *
     * @return self
     */
    public function setMinAmount($min_amount)
    {

        if (!is_null($min_amount) && ($min_amount > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $min_amount when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($min_amount) && ($min_amount < 0)) {
            throw new \InvalidArgumentException('invalid value for $min_amount when calling ApprovalRequestResponseApprovalRequestApprovalRequestFormParts., must be bigger than or equal to 0.');
        }

        $this->container['min_amount'] = $min_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


