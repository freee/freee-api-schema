<?php
/**
 * DealCreateResponseDealPayments
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * DealCreateResponseDealPayments Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class DealCreateResponseDealPayments implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'dealCreateResponse_deal_payments';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'date' => 'string',
        'from_walletable_type' => 'string',
        'from_walletable_id' => 'int',
        'amount' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'date' => null,
        'from_walletable_type' => null,
        'from_walletable_id' => null,
        'amount' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'date' => 'date',
        'from_walletable_type' => 'from_walletable_type',
        'from_walletable_id' => 'from_walletable_id',
        'amount' => 'amount'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date' => 'setDate',
        'from_walletable_type' => 'setFromWalletableType',
        'from_walletable_id' => 'setFromWalletableId',
        'amount' => 'setAmount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date' => 'getDate',
        'from_walletable_type' => 'getFromWalletableType',
        'from_walletable_id' => 'getFromWalletableId',
        'amount' => 'getAmount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const FROM_WALLETABLE_TYPE_BANK_ACCOUNT = 'bank_account';
    const FROM_WALLETABLE_TYPE_CREDIT_CARD = 'credit_card';
    const FROM_WALLETABLE_TYPE_WALLET = 'wallet';
    const FROM_WALLETABLE_TYPE_PRIVATE_ACCOUNT_ITEM = 'private_account_item';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getFromWalletableTypeAllowableValues()
    {
        return [
            self::FROM_WALLETABLE_TYPE_BANK_ACCOUNT,
            self::FROM_WALLETABLE_TYPE_CREDIT_CARD,
            self::FROM_WALLETABLE_TYPE_WALLET,
            self::FROM_WALLETABLE_TYPE_PRIVATE_ACCOUNT_ITEM,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['date'] = $data['date'] ?? null;
        $this->container['from_walletable_type'] = $data['from_walletable_type'] ?? null;
        $this->container['from_walletable_id'] = $data['from_walletable_id'] ?? null;
        $this->container['amount'] = $data['amount'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['date'] === null) {
            $invalidProperties[] = "'date' can't be null";
        }
        $allowedValues = $this->getFromWalletableTypeAllowableValues();
        if (!is_null($this->container['from_walletable_type']) && !in_array($this->container['from_walletable_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'from_walletable_type', must be one of '%s'",
                $this->container['from_walletable_type'],
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['from_walletable_id']) && ($this->container['from_walletable_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'from_walletable_id', must be smaller than or equal to 2147483647.";
        }

        if (!is_null($this->container['from_walletable_id']) && ($this->container['from_walletable_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'from_walletable_id', must be bigger than or equal to 1.";
        }

        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if (($this->container['amount'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'amount', must be smaller than or equal to 9223372036854775807.";
        }

        if (($this->container['amount'] < -9223372036854775808)) {
            $invalidProperties[] = "invalid value for 'amount', must be bigger than or equal to -9223372036854775808.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 取引行ID
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DealCreateResponseDealPayments., must be smaller than or equal to 9223372036854775807.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling DealCreateResponseDealPayments., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date 支払日
     *
     * @return self
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets from_walletable_type
     *
     * @return string|null
     */
    public function getFromWalletableType()
    {
        return $this->container['from_walletable_type'];
    }

    /**
     * Sets from_walletable_type
     *
     * @param string|null $from_walletable_type 口座区分 (銀行口座: bank_account, クレジットカード: credit_card, 現金: wallet, プライベート資金（法人の場合は役員借入金もしくは役員借入金、個人の場合は事業主貸もしくは事業主借）: private_account_item)
     *
     * @return self
     */
    public function setFromWalletableType($from_walletable_type)
    {
        $allowedValues = $this->getFromWalletableTypeAllowableValues();
        if (!is_null($from_walletable_type) && !in_array($from_walletable_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'from_walletable_type', must be one of '%s'",
                    $from_walletable_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['from_walletable_type'] = $from_walletable_type;

        return $this;
    }

    /**
     * Gets from_walletable_id
     *
     * @return int|null
     */
    public function getFromWalletableId()
    {
        return $this->container['from_walletable_id'];
    }

    /**
     * Sets from_walletable_id
     *
     * @param int|null $from_walletable_id 口座ID（from_walletable_typeがprivate_account_itemの場合は勘定科目ID）
     *
     * @return self
     */
    public function setFromWalletableId($from_walletable_id)
    {

        if (!is_null($from_walletable_id) && ($from_walletable_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $from_walletable_id when calling DealCreateResponseDealPayments., must be smaller than or equal to 2147483647.');
        }
        if (!is_null($from_walletable_id) && ($from_walletable_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $from_walletable_id when calling DealCreateResponseDealPayments., must be bigger than or equal to 1.');
        }

        $this->container['from_walletable_id'] = $from_walletable_id;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return int
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param int $amount 支払金額
     *
     * @return self
     */
    public function setAmount($amount)
    {

        if (($amount > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling DealCreateResponseDealPayments., must be smaller than or equal to 9223372036854775807.');
        }
        if (($amount < -9223372036854775808)) {
            throw new \InvalidArgumentException('invalid value for $amount when calling DealCreateResponseDealPayments., must be bigger than or equal to -9223372036854775808.');
        }

        $this->container['amount'] = $amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


