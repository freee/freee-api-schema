<?php
/**
 * JournalsResponseJournals
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * JournalsResponseJournals Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class JournalsResponseJournals implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'journalsResponse_journals';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'messages' => 'string[]',
        'company_id' => 'int',
        'download_type' => 'string',
        'start_date' => 'string',
        'end_date' => 'string',
        'visible_tags' => 'string[]',
        'visible_ids' => 'string[]',
        'status_url' => 'string',
        'up_to_date' => 'bool',
        'up_to_date_reasons' => '\OpenAPI\Client\Model\JournalsResponseJournalsUpToDateReasons[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'messages' => null,
        'company_id' => null,
        'download_type' => null,
        'start_date' => null,
        'end_date' => null,
        'visible_tags' => null,
        'visible_ids' => null,
        'status_url' => null,
        'up_to_date' => null,
        'up_to_date_reasons' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'messages' => 'messages',
        'company_id' => 'company_id',
        'download_type' => 'download_type',
        'start_date' => 'start_date',
        'end_date' => 'end_date',
        'visible_tags' => 'visible_tags',
        'visible_ids' => 'visible_ids',
        'status_url' => 'status_url',
        'up_to_date' => 'up_to_date',
        'up_to_date_reasons' => 'up_to_date_reasons'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'messages' => 'setMessages',
        'company_id' => 'setCompanyId',
        'download_type' => 'setDownloadType',
        'start_date' => 'setStartDate',
        'end_date' => 'setEndDate',
        'visible_tags' => 'setVisibleTags',
        'visible_ids' => 'setVisibleIds',
        'status_url' => 'setStatusUrl',
        'up_to_date' => 'setUpToDate',
        'up_to_date_reasons' => 'setUpToDateReasons'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'messages' => 'getMessages',
        'company_id' => 'getCompanyId',
        'download_type' => 'getDownloadType',
        'start_date' => 'getStartDate',
        'end_date' => 'getEndDate',
        'visible_tags' => 'getVisibleTags',
        'visible_ids' => 'getVisibleIds',
        'status_url' => 'getStatusUrl',
        'up_to_date' => 'getUpToDate',
        'up_to_date_reasons' => 'getUpToDateReasons'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const DOWNLOAD_TYPE_CSV = 'csv';
    const DOWNLOAD_TYPE_GENERIC = 'generic';
    const DOWNLOAD_TYPE_PDF = 'pdf';
    const VISIBLE_TAGS_PARTNER = 'partner';
    const VISIBLE_TAGS_ITEM = 'item';
    const VISIBLE_TAGS_TAG = 'tag';
    const VISIBLE_TAGS_SECTION = 'section';
    const VISIBLE_TAGS_DESCRIPTION = 'description';
    const VISIBLE_TAGS_WALLET_TXN_DESCRIPTION = 'wallet_txn_description';
    const VISIBLE_TAGS_ALL = 'all';
    const VISIBLE_TAGS_SEGMENT_1_TAG = 'segment_1_tag';
    const VISIBLE_TAGS_SEGMENT_2_TAG = 'segment_2_tag';
    const VISIBLE_TAGS_SEGMENT_3_TAG = 'segment_3_tag';
    const VISIBLE_IDS_DEAL_ID = 'deal_id';
    const VISIBLE_IDS_TRANSFER_ID = 'transfer_id';
    const VISIBLE_IDS_MANUAL_JOURNAL_ID = 'manual_journal_id';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDownloadTypeAllowableValues()
    {
        return [
            self::DOWNLOAD_TYPE_CSV,
            self::DOWNLOAD_TYPE_GENERIC,
            self::DOWNLOAD_TYPE_PDF,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibleTagsAllowableValues()
    {
        return [
            self::VISIBLE_TAGS_PARTNER,
            self::VISIBLE_TAGS_ITEM,
            self::VISIBLE_TAGS_TAG,
            self::VISIBLE_TAGS_SECTION,
            self::VISIBLE_TAGS_DESCRIPTION,
            self::VISIBLE_TAGS_WALLET_TXN_DESCRIPTION,
            self::VISIBLE_TAGS_ALL,
            self::VISIBLE_TAGS_SEGMENT_1_TAG,
            self::VISIBLE_TAGS_SEGMENT_2_TAG,
            self::VISIBLE_TAGS_SEGMENT_3_TAG,
        ];
    }

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVisibleIdsAllowableValues()
    {
        return [
            self::VISIBLE_IDS_DEAL_ID,
            self::VISIBLE_IDS_TRANSFER_ID,
            self::VISIBLE_IDS_MANUAL_JOURNAL_ID,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['messages'] = $data['messages'] ?? null;
        $this->container['company_id'] = $data['company_id'] ?? null;
        $this->container['download_type'] = $data['download_type'] ?? null;
        $this->container['start_date'] = $data['start_date'] ?? null;
        $this->container['end_date'] = $data['end_date'] ?? null;
        $this->container['visible_tags'] = $data['visible_tags'] ?? null;
        $this->container['visible_ids'] = $data['visible_ids'] ?? null;
        $this->container['status_url'] = $data['status_url'] ?? null;
        $this->container['up_to_date'] = $data['up_to_date'] ?? null;
        $this->container['up_to_date_reasons'] = $data['up_to_date_reasons'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['id'] === null) {
            $invalidProperties[] = "'id' can't be null";
        }
        if (($this->container['id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['id'] < 1)) {
            $invalidProperties[] = "invalid value for 'id', must be bigger than or equal to 1.";
        }

        if ($this->container['company_id'] === null) {
            $invalidProperties[] = "'company_id' can't be null";
        }
        if (($this->container['company_id'] > 2147483647)) {
            $invalidProperties[] = "invalid value for 'company_id', must be smaller than or equal to 2147483647.";
        }

        if (($this->container['company_id'] < 1)) {
            $invalidProperties[] = "invalid value for 'company_id', must be bigger than or equal to 1.";
        }

        $allowedValues = $this->getDownloadTypeAllowableValues();
        if (!is_null($this->container['download_type']) && !in_array($this->container['download_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'download_type', must be one of '%s'",
                $this->container['download_type'],
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id 受け付けID
     *
     * @return self
     */
    public function setId($id)
    {

        if (($id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $id when calling JournalsResponseJournals., must be smaller than or equal to 2147483647.');
        }
        if (($id < 1)) {
            throw new \InvalidArgumentException('invalid value for $id when calling JournalsResponseJournals., must be bigger than or equal to 1.');
        }

        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets messages
     *
     * @return string[]|null
     */
    public function getMessages()
    {
        return $this->container['messages'];
    }

    /**
     * Sets messages
     *
     * @param string[]|null $messages messages
     *
     * @return self
     */
    public function setMessages($messages)
    {
        $this->container['messages'] = $messages;

        return $this;
    }

    /**
     * Gets company_id
     *
     * @return int
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     *
     * @param int $company_id 事業所ID
     *
     * @return self
     */
    public function setCompanyId($company_id)
    {

        if (($company_id > 2147483647)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling JournalsResponseJournals., must be smaller than or equal to 2147483647.');
        }
        if (($company_id < 1)) {
            throw new \InvalidArgumentException('invalid value for $company_id when calling JournalsResponseJournals., must be bigger than or equal to 1.');
        }

        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets download_type
     *
     * @return string|null
     */
    public function getDownloadType()
    {
        return $this->container['download_type'];
    }

    /**
     * Sets download_type
     *
     * @param string|null $download_type ダウンロード形式
     *
     * @return self
     */
    public function setDownloadType($download_type)
    {
        $allowedValues = $this->getDownloadTypeAllowableValues();
        if (!is_null($download_type) && !in_array($download_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'download_type', must be one of '%s'",
                    $download_type,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['download_type'] = $download_type;

        return $this;
    }

    /**
     * Gets start_date
     *
     * @return string|null
     */
    public function getStartDate()
    {
        return $this->container['start_date'];
    }

    /**
     * Sets start_date
     *
     * @param string|null $start_date 取得開始日 (yyyy-mm-dd)
     *
     * @return self
     */
    public function setStartDate($start_date)
    {
        $this->container['start_date'] = $start_date;

        return $this;
    }

    /**
     * Gets end_date
     *
     * @return string|null
     */
    public function getEndDate()
    {
        return $this->container['end_date'];
    }

    /**
     * Sets end_date
     *
     * @param string|null $end_date 取得終了日 (yyyy-mm-dd)
     *
     * @return self
     */
    public function setEndDate($end_date)
    {
        $this->container['end_date'] = $end_date;

        return $this;
    }

    /**
     * Gets visible_tags
     *
     * @return string[]|null
     */
    public function getVisibleTags()
    {
        return $this->container['visible_tags'];
    }

    /**
     * Sets visible_tags
     *
     * @param string[]|null $visible_tags visible_tags
     *
     * @return self
     */
    public function setVisibleTags($visible_tags)
    {
        $allowedValues = $this->getVisibleTagsAllowableValues();
        if (!is_null($visible_tags) && array_diff($visible_tags, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visible_tags', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visible_tags'] = $visible_tags;

        return $this;
    }

    /**
     * Gets visible_ids
     *
     * @return string[]|null
     */
    public function getVisibleIds()
    {
        return $this->container['visible_ids'];
    }

    /**
     * Sets visible_ids
     *
     * @param string[]|null $visible_ids visible_ids
     *
     * @return self
     */
    public function setVisibleIds($visible_ids)
    {
        $allowedValues = $this->getVisibleIdsAllowableValues();
        if (!is_null($visible_ids) && array_diff($visible_ids, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'visible_ids', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['visible_ids'] = $visible_ids;

        return $this;
    }

    /**
     * Gets status_url
     *
     * @return string|null
     */
    public function getStatusUrl()
    {
        return $this->container['status_url'];
    }

    /**
     * Sets status_url
     *
     * @param string|null $status_url ステータス確認用URL
     *
     * @return self
     */
    public function setStatusUrl($status_url)
    {
        $this->container['status_url'] = $status_url;

        return $this;
    }

    /**
     * Gets up_to_date
     *
     * @return bool|null
     */
    public function getUpToDate()
    {
        return $this->container['up_to_date'];
    }

    /**
     * Sets up_to_date
     *
     * @param bool|null $up_to_date 集計結果が最新かどうか
     *
     * @return self
     */
    public function setUpToDate($up_to_date)
    {
        $this->container['up_to_date'] = $up_to_date;

        return $this;
    }

    /**
     * Gets up_to_date_reasons
     *
     * @return \OpenAPI\Client\Model\JournalsResponseJournalsUpToDateReasons[]|null
     */
    public function getUpToDateReasons()
    {
        return $this->container['up_to_date_reasons'];
    }

    /**
     * Sets up_to_date_reasons
     *
     * @param \OpenAPI\Client\Model\JournalsResponseJournalsUpToDateReasons[]|null $up_to_date_reasons 集計が最新でない場合の要因情報
     *
     * @return self
     */
    public function setUpToDateReasons($up_to_date_reasons)
    {
        $this->container['up_to_date_reasons'] = $up_to_date_reasons;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


