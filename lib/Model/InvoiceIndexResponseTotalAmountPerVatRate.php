<?php
/**
 * InvoiceIndexResponseTotalAmountPerVatRate
 *
 * PHP version 7.3
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * freee API
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v1.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.4.0
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * InvoiceIndexResponseTotalAmountPerVatRate Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class InvoiceIndexResponseTotalAmountPerVatRate implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'invoiceIndexResponse_total_amount_per_vat_rate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'vat_5' => 'int',
        'vat_8' => 'int',
        'reduced_vat_8' => 'int',
        'vat_10' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'vat_5' => 'int64',
        'vat_8' => 'int64',
        'reduced_vat_8' => 'int64',
        'vat_10' => 'int64'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'vat_5' => 'vat_5',
        'vat_8' => 'vat_8',
        'reduced_vat_8' => 'reduced_vat_8',
        'vat_10' => 'vat_10'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'vat_5' => 'setVat5',
        'vat_8' => 'setVat8',
        'reduced_vat_8' => 'setReducedVat8',
        'vat_10' => 'setVat10'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'vat_5' => 'getVat5',
        'vat_8' => 'getVat8',
        'reduced_vat_8' => 'getReducedVat8',
        'vat_10' => 'getVat10'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['vat_5'] = $data['vat_5'] ?? null;
        $this->container['vat_8'] = $data['vat_8'] ?? null;
        $this->container['reduced_vat_8'] = $data['reduced_vat_8'] ?? null;
        $this->container['vat_10'] = $data['vat_10'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['vat_5'] === null) {
            $invalidProperties[] = "'vat_5' can't be null";
        }
        if (($this->container['vat_5'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'vat_5', must be smaller than or equal to 9223372036854775807.";
        }

        if ($this->container['vat_8'] === null) {
            $invalidProperties[] = "'vat_8' can't be null";
        }
        if (($this->container['vat_8'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'vat_8', must be smaller than or equal to 9223372036854775807.";
        }

        if ($this->container['reduced_vat_8'] === null) {
            $invalidProperties[] = "'reduced_vat_8' can't be null";
        }
        if (($this->container['reduced_vat_8'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'reduced_vat_8', must be smaller than or equal to 9223372036854775807.";
        }

        if ($this->container['vat_10'] === null) {
            $invalidProperties[] = "'vat_10' can't be null";
        }
        if (($this->container['vat_10'] > 9223372036854775807)) {
            $invalidProperties[] = "invalid value for 'vat_10', must be smaller than or equal to 9223372036854775807.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets vat_5
     *
     * @return int
     */
    public function getVat5()
    {
        return $this->container['vat_5'];
    }

    /**
     * Sets vat_5
     *
     * @param int $vat_5 税率5%の税込み金額合計
     *
     * @return self
     */
    public function setVat5($vat_5)
    {

        if (($vat_5 > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $vat_5 when calling InvoiceIndexResponseTotalAmountPerVatRate., must be smaller than or equal to 9223372036854775807.');
        }

        $this->container['vat_5'] = $vat_5;

        return $this;
    }

    /**
     * Gets vat_8
     *
     * @return int
     */
    public function getVat8()
    {
        return $this->container['vat_8'];
    }

    /**
     * Sets vat_8
     *
     * @param int $vat_8 税率8%の税込み金額合計
     *
     * @return self
     */
    public function setVat8($vat_8)
    {

        if (($vat_8 > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $vat_8 when calling InvoiceIndexResponseTotalAmountPerVatRate., must be smaller than or equal to 9223372036854775807.');
        }

        $this->container['vat_8'] = $vat_8;

        return $this;
    }

    /**
     * Gets reduced_vat_8
     *
     * @return int
     */
    public function getReducedVat8()
    {
        return $this->container['reduced_vat_8'];
    }

    /**
     * Sets reduced_vat_8
     *
     * @param int $reduced_vat_8 軽減税率8%の税込み金額合計
     *
     * @return self
     */
    public function setReducedVat8($reduced_vat_8)
    {

        if (($reduced_vat_8 > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $reduced_vat_8 when calling InvoiceIndexResponseTotalAmountPerVatRate., must be smaller than or equal to 9223372036854775807.');
        }

        $this->container['reduced_vat_8'] = $reduced_vat_8;

        return $this;
    }

    /**
     * Gets vat_10
     *
     * @return int
     */
    public function getVat10()
    {
        return $this->container['vat_10'];
    }

    /**
     * Sets vat_10
     *
     * @param int $vat_10 税率10%の税込み金額合計
     *
     * @return self
     */
    public function setVat10($vat_10)
    {

        if (($vat_10 > 9223372036854775807)) {
            throw new \InvalidArgumentException('invalid value for $vat_10 when calling InvoiceIndexResponseTotalAmountPerVatRate., must be smaller than or equal to 9223372036854775807.');
        }

        $this->container['vat_10'] = $vat_10;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


